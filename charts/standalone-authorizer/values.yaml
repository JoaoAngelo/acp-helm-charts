## standalone-authorizer image parameters
##
image:
  ## Image repository
  ##
  repository: docker.cloudentity.io/standalone-authorizer

  ## Image pull policy
  ##
  pullPolicy: IfNotPresent

  ## Image tag (immutable tags are recommended, default is the chart appVersion)
  ##
  tag: ""

## standalone-authorizer image registry secret names as an array
##
imagePullSecrets:
  - name: docker.cloudentity.io

## String to fully override standalone-authorizer.fullname
##
# fullnameOverride: ""

## Service account to use by the standalone-authorizer
##
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Issuer URL of your tenant's ACP system workspace
##
## When using standalone-authorizer in single-tenant mode, this should point
## to the system workspace of your tenant.
## i.e. "http://authz.cloudentity.io/yourtenant/system"
##
## If you're using multi-tenant standalone-authorizer this should point
## to the `system` workspace of your `system` tenant.
## i.e. "http://yourdomain.com/system/system"
##
issuerURL: "https://acp.acp-system:8443/default/system"

## Vanity Domain
## If the issuerURL uses a vanity domain, you will need to specify the tenantID,
## and if the domain is per-server, then you must also specify the terverID.
## There is no harm in specifying them, even if you do not use a vanity domain.
tenantID: "default"
serverID: "system"

## Credentials for your ACP standalone-authorizer
##
##
clientCredentials:
  # Specifies whether a kubernetes secret should be created from the provided clientID and clientSecret.
  # For production setup please create secret manually and use name
  # parameter to integrate with standalone-authorizer
  create: true

  # The name of the client secret to use
  # If not set and create is true, a name is generated using the fullname template
  name: ""

  # Default dummy values
  # You can provide credentials generated by ACP for your standalone gateway.
  clientID: "bqesdrc4m4co2s81mpu0"
  clientSecret: "LH6mAb6PNljvjYMIF-A5RP2bElA5a5bnQah8sG0fsLA"

## Disables TLS in standalone-authorizer
##
tlsDisabled: false

## Additional standalone-authorizer environment variables
##
extraEnv: {}

## Pod resources definition
resources: {}
  # requests:
  #   cpu: 10m
  #   memory: 48Mi
  # limits:
  #   cpu: 100m
  #   memory: 96Mi

service:
  ## standalone-authorizer service type
  ##
  type: ClusterIP

  ## standalone-authorizer service HTTP port
  ##
  port: 9004
  name: http

ingress:
  ## Enables the Ingress for standalone-authorizer.
  ##
  enabled: false

  ## Ingress annotations
  ##
  annotations: {}

  ## Ingress hostnames with paths
  ##
  hosts:
    - host: standalone-authorizer.acp-system
      paths:
        - path: /authorize

  ## Ingress TLS configuration
  ## Secrets must be manually created in the namespace
  tls: []
  #  - secretName: standalone-authorizer-tls
  #    hosts:
  #      - standalone.domain.com

## A security context defines privilege and access control settings for a Pod or Container
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
## Pod security context
##
podSecurityContext:
  fsGroup: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

## Container security context
##
containerSecurityContext:
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

## Additional standalone-authorizer ConfigMap entries
##
data:
  ## If you're exposing ACP with your own custom (not publically trusted) certificates, Istio Authorizer needs to trust them.
  ## Set the ca.crt to the CA certificate used by ACP.
  ##
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDfjCCAmagAwIBAgIUHOLlcMhX8uJyFafYYNXYBMBJr2swDQYJKoZIhvcNAQEL
    BQAwVzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
    B1NlYXR0bGUxFDASBgNVBAoTC0Nsb3VkZW50aXR5MQswCQYDVQQLEwJDQTAeFw0y
    MTAxMjAwOTQ4MDBaFw0yNjAxMTkwOTQ4MDBaMFcxCzAJBgNVBAYTAlVTMRMwEQYD
    VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdTZWF0dGxlMRQwEgYDVQQKEwtDbG91
    ZGVudGl0eTELMAkGA1UECxMCQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
    AoIBAQDKJroMoumr9jY129z7uf0WrvMxmzexP72ogINlQlM/p910YfnLYSWOUEIH
    kQ5eyq3ATuesPzamNxjq4JkafopsMBeieCeVzir4VTmsxLxbBZG2GjdsGpyXmrXb
    LXTb5dgNcolYh6LLPb11cBeb9TAy2D97Vx4t1Hr2SeLG1VvkNyNnoog6tZdmJUis
    ufW9GOyXgiAv46rtgvvpzYn+LbE7oiXlQHICHNpeTh7140HG7eWMPubINuilGZBY
    W80IGTpGUf2Vmuwo2LA17z5/3IB0dqlY5eT321TYVoqH1TYZrMllSLc+2x750e+l
    E9sHil8QPptAS74UWUsq2PgIvyZbAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP
    BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTKWQeEZBRJ/UO1Py7EfTaOqVujbTAN
    BgkqhkiG9w0BAQsFAAOCAQEAsg5ker9FPcq1u5E+y4Qq1yjUeuOT0kap+aIE1mp2
    LSQoEA+tb40s/iNmTMdvCGReeoRoVYKz66+3zGoFYg5W1c5Ct9whjiLhKP1Pzc4I
    JbPGklSrnnAwD72ypLF4yrTMTD65gTMsr2ao0MOe6vy/Z8R2uz48QJHhhi71VGhi
    FstSiWvb4AgNhN39Ag5ufLtrGCbuZw5TSeW0J7PTBoYV1Z/0jrsdqxk8MjnbR8Qe
    VyZGyIRnGkXUtC239/Lz0v0PXVwAPUF8ITb0JYcG/ojIc5VfTOkQOeOHHBaS+dXt
    HBJjBbnwpN4tNFhczJkbga16hL+vV0I4z61mJG8OkDr25Q==
    -----END CERTIFICATE-----
  # The data should match standalone-authorizer configuration options
  # https://docs.authorization.cloudentity.com/guides/developer/protect/standalone/
  #
  config: |
    http_client:
      root_ca: /data/ca.crt
